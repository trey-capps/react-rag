# -*- coding: utf-8 -*-
"""IntentClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16T6AqhoP8tqnysvqEGYjilQorBiQUmXG
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade --quiet langchain langchain-community langchain-openai langchain-experimental pypdf openai chromadb sentence_transformers

# Commented out IPython magic to ensure Python compatibility.
# %pip install llama-index llama-index-embeddings-huggingface llama-index-vector-stores-chroma

"""## Preloaded Parsed Documents"""

# Build the expected parsed sample document JSON

sample_document_json = [
    {
        "subheading": "Aggrement Overview",
        "content": "THIS PARTNERSHIP AGREEMENT is made this 30th day of September 2023, by and between Partner 1 and Partner 2.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Explanatory Statement",
        "content": "The parties hereto desire to enter into the business of purchasing, acquiring, operating, leasing, owning and selling Grape acreage and other specialty crop(s), including but not limited to that certain parcel of land, and all improvements constructed thereon, described as [specify address] and engaging in any other lawful phase or aspect of viticulture or specialty crop agriculture. In order to accomplish their aforesaid desires, the parties hereto desire to join together in a general partnership under and pursuant to the Uniform Partnership Act, amended from time to time (the \"Act\"). NOW THEREFORE, in consideration of their mutual promises, covenants, and agreements, and the Explanatory Statement, which Explanatory Statement is incorporated by reference herein and made a substantive part of this Partnership Agreement, the parties hereto do hereby promise, covenant and agree as follows:",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 2. Principal Place of Business",
        "content": "The principal office and place of business of the Partnership (the \"Office\") shall be located at Angell Road.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 3. Business and Purpose",
        "content": "3.1. The business and purposes of the Partnership are to manage, and operate, grape vineyards. (the \"Vineyards\"), or interest therein, including but not limited to that certain parcel of land and such other businesses and purposes as the Partners may from time to time determine in accordance with Section 8 of this Agreement.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 4. Term",
        "content": "The Partnership shall commence upon the date of this Agreement, as set forth above. Unless sooner terminated pursuant to the further provisions of this Agreement, the Partnership shall continue without defined term.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 5. Capital Contribution",
        "content": "5.1. The original capital contributions to the Partnership of each of the Partners shall be made concurrently with their respective execution, acknowledgement, sealing and delivery of this Agreement in the following dollar amounts set forth after their respective names: \n Partner 1: Capital contribution includes his existing grape acreage as of January 1, 2010. Grape acreage is estimated, with a 5% margin of error, at 190 acres valued at approximately 775,000. An additional cash capital contribution of $180,000 will also be made. Capital contribution does not include any equipment, buildings, or open land. Partner 2: Capital contribution is $180,000 to be financed by Partner 1 or another lender. \n 5.2. Except as specifically provided in this Agreement, or as otherwise provided by and in accordance with law to the extent such law is not inconsistent with this Agreement, no Partner shall have the right to withdraw or reduce his or her contributions to the capital of the Partnership.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 6. Profit and Loss",
        "content": "6.1. The percentages of Partnership Rights and Partnership Interest of each of the Partners shall be as follows:\n Partner 1: 84% \n Partner 2: 16% \n6.2. Except as provided in Section 7.3. of this Agreement, for purposes of Sections 702 and 704 of the Internal Revenue Code of 1954, or the corresponding provisions of any `future federal internal revenue law, or any similar tax law of any state or jurisdiction, the determination of each Partner's distributive share of all items of income, gain, loss, deduction, credit or allowance of the Partnership for any period or year shall be made in accordance with, and in proportion to, such Partner's percentage of Partnership Interest as it may then exist.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 7. Distribution of Profits",
        "content": "7.1. Generally, gross cash distribution in proportion to Partners percentages of partnership interest, will be made based on the scheduled payments of processors or within 60 days of payments being made. The gross cash distribution \n 7.2 Generally, operating expenses will be shared at the time those expenses are realized in proportion to Partners percentages of partnership interest. While each purchase will not require an accounting of partnership interest, reimbursement to the payor, based on share, will be resolved every 30 days. \n 7.3 Exception to section 7.2: Partner 2 will not be responsible for any operating expenses for the first 15 year. His share of expenses during that time will be limited to his capital contribution payments.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 9. Salaries",
        "content": "Unless otherwise agreed by the Partners in accordance with Section 8 of this Agreement, no Partner shall receive any salary for services rendered to or for the Partnership. At the discretion of majority partner the minority partner will be eligible to receive up to 1% of the total equity interest in the operation per year based on performance of the Partner and the Partnership. It is the intent of the majority partner to begin making this transfer after 5 years.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 10. Legal Title to Partnership Property",
        "content": "Legal title to the property of the Partnership shall be held in the name of or in such other name or manner as the Partners shall determine to be in the best interest of the Partnership. Without limiting the foregoing grant of authority, the Partners may arrange to have title taken and held in their own names or in the names of trustees, nominees or straw parties for the Partnership. It is expressly understood and agreed that the manner of holding title to property (or any part thereof) of the Partnership is solely for the convenience of the Partnership, and that all such property shall be treated as Partnership property subject to the terms of this Agreement.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 12. Fiscal Year Audits",
        "content": "This partnership is the expansion of a small business built in family and trust. Records will be imperfect but maintained to current standards of the business. Audits would be impractical and expensive and rather than relying on outside auditors the partners will rely on themselves to fairly apportion expenses and profits.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    },
    {
        "subheading": "Section 11. Banking",
        "content": "All revenue of the Partnership shall be deposited regularly in the Partners private savings and checking accounts at such bank or banks as shall be selected by the Partners. The partners will not borrow any money by or on behalf of, the Partnership.",
        "company_name": "Term Sheet 80 - Silver Crest Vineyards"
    }
]

"""## RAG"""



"""### Intent Classification"""

from openai import OpenAI

from typing import Any, Dict, List, Union, Literal, Optional

from pydantic import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser

import os
os.environ["OPENAI_API_KEY"] = "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"

"""#### Defining Intent Output Structure"""

class Entity(BaseModel):
    topic: Optional[Union[str, List[str]]] = Field(
        ...,
        description="Topic areas and Subheadings present in the user query"
    )
    name: Optional[Union[str, List[str]]] = Field(
        ...,
        description="Name of Contracts or Companies present in the user query"
    )

class IntentWithEntities(BaseModel):
    intent: Literal['Subsection', 'Generic', 'Other'] = Field(
        ...,
        description="Intent of the user query"
    )
    entity: Entity = Field(
        ...,
        description="Entity present in the user query"
    )

intent_parser = PydanticOutputParser(pydantic_object=IntentWithEntities)

query = "What is the interest rate for Silver Crest Vineyards?"
query = "Where is principal located for Silver Crest Vineyards?"

intent_system_prompt = """
You are an intent classifier. Given a query, classify the intent related to Subsection, Generic or Other.
If there is any mention of a specific fact this will be related to Subsection.
If there is a questions that would be about an entire document or multiple documents this would be considered Generic.

In addition any relevant topic and names present in the query should be extracted. Never elaborate.

A few examples are given below:

Query: What is the interest for Farrington Farms?
Response: {"intent": "Subsection", "entity": {"topic": "principal", "name": "Farrington Farms"}}

Query: provide a summary of the Galliger towing aggreement?
Response: {"intent": "Generic", "entity": {"name": "Galliger towing"}}
"""

intent_user_prompt = f"""
Provide your evalaution in the following format:
{intent_parser.get_format_instructions()}

Query: {query}
"""

print(intent_system_prompt)

print(intent_user_prompt)

client = OpenAI()

raw_response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {
            "role": "system",
            "content": intent_system_prompt
        },
        {
            "role": "user",
            "content": intent_user_prompt
        }
    ]
)

response = raw_response.choices[0].message.content

# Parse the output into the structured format
parsed_output = intent_parser.parse(response)
print(type(parsed_output))
print(parsed_output.dict())

"""#### Identify Relevant Sections"""

class ClientFactory:
    def __init__(self):
        self.factory = {}

    def does_collection_exist(self, name):
        return name in self.factory

    def register(self, name, client):
        if not self.does_collection_exist(name):
            self.factory[name] = client
        else:
            raise Exception(f"{name} already registered in factory")

    def unregister(self, name):
        if self.does_collection_exist(name):
            del self.factory[name]
        else:
            raise Exception(f"{name} not registered in factory")

    def get_collection(self, name):
        if not self.does_collection_exist(name):
            raise Exception(f"{name} not registered in factory")
        return self.factory[name]

class MetadataCollection(ClientFactory):
    def __init__(self):
        super().__init__()
        self.chroma_path = "testing"
        self.client = self.get_or_create_client()
        self.embedding_function = self.get_embedding_function()

    def get_or_create_client(self, **kwargs):
        import chromadb
        from chromadb.config import Settings

        return chromadb.Client(Settings(anonymized_telemetry=False, **kwargs))

    def get_embedding_function(self, **kwargs):
        from chromadb.utils import embedding_functions

        return embedding_functions.SentenceTransformerEmbeddingFunction(model_name="all-MiniLM-L6-v2")

    def add_metadata(self, collection_name: str, content: List[str], metadata: Optional[List[Dict[str, str]]] = None, id: Optional[List[str]] = None):
        import uuid

        collection = self.get_or_create_collection(collection_name)
        collection.add(
            documents = content,
            metadatas = metadata,
            ids = [str(uuid.uuid4()) for _ in content]
        )
        return collection

    @staticmethod
    def _chroma_collection_metadata():
        return {"hnsw:space": "cosine"}

    def _does_collection_exists(self, collection_name: str):
        return collection_name in [collection.name for collection in self.client.list_collections()]

    def _get_collection(self, collection_name: str):
        return self.client.get_collection(name = collection_name, embedding_function = self.embedding_function)

    def _create_collection(self, collection_name: str):
        return self.client.create_collection(name = collection_name, embedding_function = self.embedding_function, metadata = self._chroma_collection_metadata())

    def get_or_create_collection(self, collection_name: str):
        if not self._does_collection_exists(collection_name):
            return self._create_collection(collection_name)
        return self._get_collection(collection_name)

    def register_collection(self, collection_name: str, collection):
        self.register(collection_name, collection)

"""### Build Metadata Indicies"""

metadata_retrieve = MetadataCollection()

sample_metadata = [chunk['subheading'] for chunk in sample_document_json]
print(sample_metadata)

subheading_collection = metadata_retrieve.add_metadata(
    collection_name = "subheading",
    content = sample_metadata
)
metadata_retrieve.register_collection("subheading", subheading_collection)

subheading_collection = metadata_retrieve.get_collection("subheading")

from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.vector_stores.chroma import ChromaVectorStore
from llama_index.core import StorageContext
from llama_index.core.indices.vector_store.base import VectorStoreIndex

vector_store = ChromaVectorStore(chroma_collection = subheading_collection)
storage_context = StorageContext.from_defaults(vector_store = vector_store)
embed_model = HuggingFaceEmbedding(model_name = "all-MiniLM-L6-v2")

index = VectorStoreIndex.from_vector_store(
    vector_store = vector_store,
    storage_context = storage_context,
    embed_model = embed_model,
    similarity_top_k = 3
)
retriever = index.as_retriever()

r_s = retriever.retrieve("principal place")
print([{"score": node.score, "text": node.text} for node in r_s])

# subheading_collection.query(
#     query_texts="principal place",
#     n_results=3,
#     # where={"metadata_field": "is_equal_to_this"},
#     # where_document={"$contains":"search_string"}
# )

